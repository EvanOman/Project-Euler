from collections import Counter
"""

Problem 12:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

"""
The number of factors of a number is simply a function of the powers of the primes in that number's
prime factorization

For example, 24 has the p factorization 2^3 * 3^1. Then we have the factors:
    1, 2, 3, 4, 6, 8, 12, 24
for a total of 8 factors. The way we can calculate this number is by simply looking at how many
combinations of some number of 2s and some numbers of threes there are. We can 0, 1, 2, or 3 twos
and 0 or 1 threes. Putting these together we have a total of (3+1) * (1 + 1) = 8

Thus the general rule for some number  n = p_1^(m_1)*p_2^(m_2)*...p_n^(m_n) is then:

    \prod_{i=1}^{n} (m_i + 1)

where m_i is the exponent of the ith prime and n is the number of prime

Now that we have a function for the number of factors for any number, we can use the fact that the
nth triangular number is given by n(n+1)/2 so we can use the factors of n and n+1 to ease computation

"""


# A simple prime factor generator
def prime_factors(n):
    factors = []
    d = 2
    while n > 1:
        while n % d == 0:
            factors.append(d)
            n /= d
        d = d + 1
        if d*d > n:
            if n > 1:
                factors.append(n)
            break
    return factors

# Finds the number of factors for the Nth triangular number
def getNumFactorsTri(N):

    # The nth triangular number is n(n+1)/2, we just need to combine the factors of n and n+1
    p1 = prime_factors(N)
    p2 = prime_factors(N + 1)

    freqs = Counter(p1+p2)

    # Since the number is divided by 2, we simply remove a 2 from the counter
    freqs.subtract([2])

    # Finds the number of combinations of primes
    return prod([x + 1 for x in freqs.values()])

# Some utility functions
def mult(a,b): return a*b
def prod(ls): return reduce(mult, ls, 1)


# From problem statement
maxNumFactors = 6
n = 8

# Simply loops over all of the triangular numbers until we find the one we want
while maxNumFactors < 500:
    maxNumFactors = getNumFactorsTri(n)
    n += 1

# Prints out the solution
print "The first such number is the %sth triangular number %s" % (n-1, (n-1)*n/2)

